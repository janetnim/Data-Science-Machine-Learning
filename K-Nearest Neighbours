# finding similarities between movies using KNN method 

import pandas as pd
import numpy as np

r_cols = ['user_id', 'movie_id', 'rating']
ratings = pd.read_csv('/Users/janetwairimu/Desktop/ML/oculus/DataScience-Python3/ml-100k/u.data', sep='\t', names=r_cols, usecols=range(3), encoding='latin-1')
ratings.head()

movieProperties = ratings.groupby('movie_id').agg({'rating': [np.size, np.mean]})
movieProperties.head()

movieNumProperties = pd.DataFrame(movieProperties['rating']['size'])
mov = movieNumProperties.apply(lambda x: (x-np.min(x))/(np.max(x)-np.min(x)))
mov.head()

movieDict = {}
with open(r'/Users/janetwairimu/Desktop/ML/oculus/DataScience-Python3/ml-100k/u.item', encoding='latin-1') as f:
    temp = ''
    for line in f:
        #line.decode("ISO-8859-1")
        fields = line.rstrip('\n').split('|')
        movieID = int(fields[0])
        name = fields[1]
        genres = fields[5:25]
        genres = map(int, genres)
        movieDict[movieID] = (name, np.array(list(genres)), mov.loc[movieID].get('size'), movieProperties.loc[movieID].rating.get('mean'))

print(movieDict[1])

# Let's now find the distance btn different movies relative to their genres

import operator

def getNeighbors(movieID, K):
    distances = []
    for movie in movieDict:
        if (movie != movieID):
            dist = computeDistance(movieDict[movieID], movieDict[movie])
            distances.append((movie, dist))
    distances.sort(key=operator.itemgetter(1))
    neighbors = []
    for x in range(K):
        neighbors.append(distances[x][0])
    return neighbors

K = 10
avgRating = 0
neighbors = getNeighbors(1, K)
for neighbor in neighbors:
    avgRating += movieDict[neighbor][3]
    print (movieDict[neighbor][0] + " " + str(movieDict[neighbor][3]))
    
avgRating /= K

# view average rating
avgRating

movieDict[1]
